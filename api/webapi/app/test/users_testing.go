// Code generated by goagen v1.5.13, DO NOT EDIT.
//
// API "docker_goa_next": users TestHelpers
//
// Command:
// $ goagen
// --design=github.com/kod-source/docker-goa-next/webapi/design
// --out=$(GOPATH)/src/app/webapi
// --version=v1.5.13

package test

import (
	"context"
	"fmt"
	"github.com/kod-source/docker-goa-next/webapi/app"
	goa "github.com/shogo82148/goa-v1"
	"github.com/shogo82148/goa-v1/goatest"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strings"
	"testing"
)

// GetCurrentUserUsersInternalServerError runs the method GetCurrentUser of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetCurrentUserUsersInternalServerError(t testing.TB, ctx context.Context, service *goa.Service, ctrl app.UsersController) http.ResponseWriter {
	t.Helper()

	// Setup service
	var (
		logBuf strings.Builder

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	if ctx == nil {
		ctx = context.Background()
	}
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/current_user"),
	}
	req := httptest.NewRequest("GET", u.String(), nil)
	req = req.WithContext(ctx)
	prms := url.Values{}

	goaCtx := goa.NewContext(goa.WithAction(ctx, "UsersTest"), rw, req, prms)
	getCurrentUserCtx, err := app.NewGetCurrentUserUsersContext(goaCtx, req, service)
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	err = ctrl.GetCurrentUser(getCurrentUserCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// GetCurrentUserUsersNotFound runs the method GetCurrentUser of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetCurrentUserUsersNotFound(t testing.TB, ctx context.Context, service *goa.Service, ctrl app.UsersController) http.ResponseWriter {
	t.Helper()

	// Setup service
	var (
		logBuf strings.Builder

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	if ctx == nil {
		ctx = context.Background()
	}
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/current_user"),
	}
	req := httptest.NewRequest("GET", u.String(), nil)
	req = req.WithContext(ctx)
	prms := url.Values{}

	goaCtx := goa.NewContext(goa.WithAction(ctx, "UsersTest"), rw, req, prms)
	getCurrentUserCtx, err := app.NewGetCurrentUserUsersContext(goaCtx, req, service)
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	err = ctrl.GetCurrentUser(getCurrentUserCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// GetCurrentUserUsersOK runs the method GetCurrentUser of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func GetCurrentUserUsersOK(t testing.TB, ctx context.Context, service *goa.Service, ctrl app.UsersController) (http.ResponseWriter, *app.User) {
	t.Helper()

	// Setup service
	var (
		logBuf strings.Builder
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	if ctx == nil {
		ctx = context.Background()
	}
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/current_user"),
	}
	req := httptest.NewRequest("GET", u.String(), nil)
	req = req.WithContext(ctx)
	prms := url.Values{}

	goaCtx := goa.NewContext(goa.WithAction(ctx, "UsersTest"), rw, req, prms)
	getCurrentUserCtx, err := app.NewGetCurrentUserUsersContext(goaCtx, req, service)
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	err = ctrl.GetCurrentUser(getCurrentUserCtx)

	// Validate response
	if err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.User
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.User)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.User", resp, resp)
		}
	}

	// Return results
	return rw, mt
}
