// Code generated by goagen v1.5.13, DO NOT EDIT.
//
// API "docker_goa_next": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/kod-source/docker-goa-next/webapi/design
// --out=$(GOPATH)/src/app/webapi
// --version=v1.5.13

package app

import (
	goa "github.com/shogo82148/goa-v1"
	"time"
)

// 投稿 (default view)
//
// Identifier: application/vnd.post_json; view=default
type PostJSON struct {
	// 作成日
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" yaml:"created_at,omitempty" xml:"created_at,omitempty"`
	// ID
	ID int `form:"id" json:"id" yaml:"id" xml:"id"`
	// プロフィール画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// タイトル
	Title string `form:"title" json:"title" yaml:"title" xml:"title"`
	// 更新日
	UpdatedAt *time.Time `form:"updated_at,omitempty" json:"updated_at,omitempty" yaml:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// ユーザーID
	UserID int `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate validates the PostJSON media type instance.
func (mt *PostJSON) Validate() (err error) {

	return
}

// my error (default view)
//
// Identifier: application/vnd.service.verror; view=default
type ServiceVerror struct {
	// Code
	Code int `form:"code" json:"code" yaml:"code" xml:"code"`
	// Details
	Details interface{} `form:"details,omitempty" json:"details,omitempty" yaml:"details,omitempty" xml:"details,omitempty"`
	// エラーメッセージ
	Message string `form:"message" json:"message" yaml:"message" xml:"message"`
	// Status
	Status string `form:"status" json:"status" yaml:"status" xml:"status"`
}

// Validate validates the ServiceVerror media type instance.
func (mt *ServiceVerror) Validate() (err error) {

	return
}

// token (default view)
//
// Identifier: application/vnd.token+json; view=default
type Token struct {
	// token value
	Token string `form:"token" json:"token" yaml:"token" xml:"token"`
	// user value
	User *User `form:"user" json:"user" yaml:"user" xml:"user"`
}

// Validate validates the Token media type instance.
func (mt *Token) Validate() (err error) {

	if mt.User == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "user"))
	}
	if mt.User != nil {
		if err2 := mt.User.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// user (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	// プロフィール画像パス
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" yaml:"avatar,omitempty" xml:"avatar,omitempty"`
	// 作成日
	CreatedAt *time.Time `form:"created_at,omitempty" json:"created_at,omitempty" yaml:"created_at,omitempty" xml:"created_at,omitempty"`
	// メール
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// ID
	ID int `form:"id" json:"id" yaml:"id" xml:"id"`
	// 名前
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// パスワード
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {

	return
}
