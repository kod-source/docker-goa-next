// Code generated by goagen v1.5.13, DO NOT EDIT.
//
// API "docker_goa_next": Application Contexts
//
// Command:
// $ main

package app

import (
	"context"
	goa "github.com/shogo82148/goa-v1"
	"net/http"
	"strconv"
)

// LoginAuthContext provides the auth login action context.
type LoginAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LoginAuthPayload
}

// NewLoginAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller login action.
func NewLoginAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// loginAuthPayload is the auth login action payload.
type loginAuthPayload struct {
	// メール
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// パスワード
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *loginAuthPayload) Validate() (err error) {
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates LoginAuthPayload from loginAuthPayload
func (payload *loginAuthPayload) Publicize() *LoginAuthPayload {
	var pub LoginAuthPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// LoginAuthPayload is the auth login action payload.
type LoginAuthPayload struct {
	// メール
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// パスワード
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *LoginAuthPayload) Validate() (err error) {

	return
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginAuthContext) OK(r *Token) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginAuthContext) BadRequest(r *ServiceVerror) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.service.verror")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *LoginAuthContext) NotFound(r *ServiceVerror) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.service.verror")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LoginAuthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SignUpAuthContext provides the auth sign_up action context.
type SignUpAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SignUpAuthPayload
}

// NewSignUpAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller sign_up action.
func NewSignUpAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*SignUpAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SignUpAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// signUpAuthPayload is the auth sign_up action payload.
type signUpAuthPayload struct {
	// プロフィール画像のパス
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" yaml:"avatar,omitempty" xml:"avatar,omitempty"`
	// メール
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// 名前
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// パスワード
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *signUpAuthPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates SignUpAuthPayload from signUpAuthPayload
func (payload *signUpAuthPayload) Publicize() *SignUpAuthPayload {
	var pub SignUpAuthPayload
	if payload.Avatar != nil {
		pub.Avatar = payload.Avatar
	}
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// SignUpAuthPayload is the auth sign_up action payload.
type SignUpAuthPayload struct {
	// プロフィール画像のパス
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" yaml:"avatar,omitempty" xml:"avatar,omitempty"`
	// メール
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// 名前
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// パスワード
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *SignUpAuthPayload) Validate() (err error) {

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *SignUpAuthContext) Created(r *Token) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SignUpAuthContext) BadRequest(r *ServiceVerror) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.service.verror")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SignUpAuthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateCommentCommentsContext provides the comments create_comment action context.
type CreateCommentCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCommentCommentsPayload
}

// NewCreateCommentCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the comments controller create_comment action.
func NewCreateCommentCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCommentCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCommentCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createCommentCommentsPayload is the comments create_comment action payload.
type createCommentCommentsPayload struct {
	// コメント画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// 投稿ID
	PostID *int `form:"post_id,omitempty" json:"post_id,omitempty" yaml:"post_id,omitempty" xml:"post_id,omitempty"`
	// コメントの内容
	Text *string `form:"text,omitempty" json:"text,omitempty" yaml:"text,omitempty" xml:"text,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCommentCommentsPayload) Validate() (err error) {
	if payload.PostID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "post_id"))
	}
	if payload.Text == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "text"))
	}
	return
}

// Publicize creates CreateCommentCommentsPayload from createCommentCommentsPayload
func (payload *createCommentCommentsPayload) Publicize() *CreateCommentCommentsPayload {
	var pub CreateCommentCommentsPayload
	if payload.Img != nil {
		pub.Img = payload.Img
	}
	if payload.PostID != nil {
		pub.PostID = *payload.PostID
	}
	if payload.Text != nil {
		pub.Text = *payload.Text
	}
	return &pub
}

// CreateCommentCommentsPayload is the comments create_comment action payload.
type CreateCommentCommentsPayload struct {
	// コメント画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// 投稿ID
	PostID int `form:"post_id" json:"post_id" yaml:"post_id" xml:"post_id"`
	// コメントの内容
	Text string `form:"text" json:"text" yaml:"text" xml:"text"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCommentCommentsPayload) Validate() (err error) {

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCommentCommentsContext) Created(r *CommentWithUserJSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.comment_with_user_json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCommentCommentsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateCommentCommentsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteCommentCommentsContext provides the comments delete_comment action context.
type DeleteCommentCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteCommentCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the comments controller delete_comment action.
func NewDeleteCommentCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCommentCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCommentCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteCommentCommentsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCommentCommentsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCommentCommentsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowCommentCommentsContext provides the comments show_comment action context.
type ShowCommentCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowCommentCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the comments controller show_comment action.
func NewShowCommentCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCommentCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCommentCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCommentCommentsContext) OK(r CommentWithUserJSONCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.comment_with_user_json; type=collection")
	}
	if r == nil {
		r = CommentWithUserJSONCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCommentCommentsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowCommentCommentsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateCommentCommentsContext provides the comments update_comment action context.
type UpdateCommentCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *UpdateCommentCommentsPayload
}

// NewUpdateCommentCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the comments controller update_comment action.
func NewUpdateCommentCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCommentCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCommentCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// updateCommentCommentsPayload is the comments update_comment action payload.
type updateCommentCommentsPayload struct {
	// コメント画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// コメントの内容
	Text *string `form:"text,omitempty" json:"text,omitempty" yaml:"text,omitempty" xml:"text,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateCommentCommentsPayload) Validate() (err error) {
	if payload.Text == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "text"))
	}
	return
}

// Publicize creates UpdateCommentCommentsPayload from updateCommentCommentsPayload
func (payload *updateCommentCommentsPayload) Publicize() *UpdateCommentCommentsPayload {
	var pub UpdateCommentCommentsPayload
	if payload.Img != nil {
		pub.Img = payload.Img
	}
	if payload.Text != nil {
		pub.Text = *payload.Text
	}
	return &pub
}

// UpdateCommentCommentsPayload is the comments update_comment action payload.
type UpdateCommentCommentsPayload struct {
	// コメント画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// コメントの内容
	Text string `form:"text" json:"text" yaml:"text" xml:"text"`
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCommentCommentsContext) OK(r *CommentJSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.comment_json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCommentCommentsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCommentCommentsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateLikesContext provides the likes create action context.
type CreateLikesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateLikesPayload
}

// NewCreateLikesContext parses the incoming request URL and body, performs validations and creates the
// context used by the likes controller create action.
func NewCreateLikesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateLikesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateLikesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createLikesPayload is the likes create action payload.
type createLikesPayload struct {
	// 投稿ID
	PostID *int `form:"post_id,omitempty" json:"post_id,omitempty" yaml:"post_id,omitempty" xml:"post_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createLikesPayload) Validate() (err error) {
	if payload.PostID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "post_id"))
	}
	return
}

// Publicize creates CreateLikesPayload from createLikesPayload
func (payload *createLikesPayload) Publicize() *CreateLikesPayload {
	var pub CreateLikesPayload
	if payload.PostID != nil {
		pub.PostID = *payload.PostID
	}
	return &pub
}

// CreateLikesPayload is the likes create action payload.
type CreateLikesPayload struct {
	// 投稿ID
	PostID int `form:"post_id" json:"post_id" yaml:"post_id" xml:"post_id"`
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateLikesContext) Created(r *LikeJSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.like_json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateLikesContext) BadRequest(r *ServiceVerror) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.service.verror")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateLikesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteLikesContext provides the likes delete action context.
type DeleteLikesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *DeleteLikesPayload
}

// NewDeleteLikesContext parses the incoming request URL and body, performs validations and creates the
// context used by the likes controller delete action.
func NewDeleteLikesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteLikesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteLikesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// deleteLikesPayload is the likes delete action payload.
type deleteLikesPayload struct {
	// 投稿ID
	PostID *int `form:"post_id,omitempty" json:"post_id,omitempty" yaml:"post_id,omitempty" xml:"post_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *deleteLikesPayload) Validate() (err error) {
	if payload.PostID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "post_id"))
	}
	return
}

// Publicize creates DeleteLikesPayload from deleteLikesPayload
func (payload *deleteLikesPayload) Publicize() *DeleteLikesPayload {
	var pub DeleteLikesPayload
	if payload.PostID != nil {
		pub.PostID = *payload.PostID
	}
	return &pub
}

// DeleteLikesPayload is the likes delete action payload.
type DeleteLikesPayload struct {
	// 投稿ID
	PostID int `form:"post_id" json:"post_id" yaml:"post_id" xml:"post_id"`
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteLikesContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteLikesContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteLikesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetLikeByUserLikesContext provides the likes get_like_by_user action context.
type GetLikeByUserLikesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetLikeByUserLikesContext parses the incoming request URL and body, performs validations and creates the
// context used by the likes controller get_like_by_user action.
func NewGetLikeByUserLikesContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetLikeByUserLikesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetLikeByUserLikesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetLikeByUserLikesContext) OK(r []int) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetLikeByUserLikesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetLikeByUserLikesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetMyLikeLikesContext provides the likes get_my_like action context.
type GetMyLikeLikesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetMyLikeLikesContext parses the incoming request URL and body, performs validations and creates the
// context used by the likes controller get_my_like action.
func NewGetMyLikeLikesContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetMyLikeLikesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetMyLikeLikesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetMyLikeLikesContext) OK(r []int) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetMyLikeLikesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// AddOperandsContext provides the operands add action context.
type AddOperandsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Left  int
	Right int
}

// NewAddOperandsContext parses the incoming request URL and body, performs validations and creates the
// context used by the operands controller add action.
func NewAddOperandsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddOperandsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddOperandsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLeft := req.Params["left"]
	if len(paramLeft) > 0 {
		rawLeft := paramLeft[0]
		if left, err2 := strconv.Atoi(rawLeft); err2 == nil {
			rctx.Left = left
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("left", rawLeft, "integer"))
		}
	}
	paramRight := req.Params["right"]
	if len(paramRight) > 0 {
		rawRight := paramRight[0]
		if right, err2 := strconv.Atoi(rawRight); err2 == nil {
			rctx.Right = right
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("right", rawRight, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddOperandsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreatePostPostsContext provides the posts create_post action context.
type CreatePostPostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreatePostPostsPayload
}

// NewCreatePostPostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller create_post action.
func NewCreatePostPostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreatePostPostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreatePostPostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createPostPostsPayload is the posts create_post action payload.
type createPostPostsPayload struct {
	// プロフィール画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPostPostsPayload) Validate() (err error) {
	if payload.Title == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "title"))
	}
	return
}

// Publicize creates CreatePostPostsPayload from createPostPostsPayload
func (payload *createPostPostsPayload) Publicize() *CreatePostPostsPayload {
	var pub CreatePostPostsPayload
	if payload.Img != nil {
		pub.Img = payload.Img
	}
	if payload.Title != nil {
		pub.Title = *payload.Title
	}
	return &pub
}

// CreatePostPostsPayload is the posts create_post action payload.
type CreatePostPostsPayload struct {
	// プロフィール画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// タイトル
	Title string `form:"title" json:"title" yaml:"title" xml:"title"`
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePostPostsContext) Created(r *IndexPostJSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.index_post_json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePostPostsContext) BadRequest(r *ServiceVerror) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.service.verror")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreatePostPostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeletePostsContext provides the posts delete action context.
type DeletePostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeletePostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller delete action.
func NewDeletePostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeletePostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeletePostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeletePostsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeletePostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// IndexPostsContext provides the posts index action context.
type IndexPostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NextID *int
}

// NewIndexPostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller index action.
func NewIndexPostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*IndexPostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := IndexPostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNextID := req.Params["next_id"]
	if len(paramNextID) > 0 {
		rawNextID := paramNextID[0]
		if nextID, err2 := strconv.Atoi(rawNextID); err2 == nil {
			tmp9 := nextID
			tmp8 := &tmp9
			rctx.NextID = tmp8
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("next_id", rawNextID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IndexPostsContext) OK(r *PostAllLimit) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.post_all_limit")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *IndexPostsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *IndexPostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowPostsContext provides the posts show action context.
type ShowPostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowPostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller show action.
func NewShowPostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPostsContext) OK(r *ShowPostJSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.show_post_json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPostsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowMyLikePostsContext provides the posts show_my_like action context.
type ShowMyLikePostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NextID *int
}

// NewShowMyLikePostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller show_my_like action.
func NewShowMyLikePostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowMyLikePostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowMyLikePostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNextID := req.Params["next_id"]
	if len(paramNextID) > 0 {
		rawNextID := paramNextID[0]
		if nextID, err2 := strconv.Atoi(rawNextID); err2 == nil {
			tmp12 := nextID
			tmp11 := &tmp12
			rctx.NextID = tmp11
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("next_id", rawNextID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowMyLikePostsContext) OK(r *PostAllLimit) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.post_all_limit")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowMyLikePostsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowMyLikePostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowPostLikePostsContext provides the posts show_post_like action context.
type ShowPostLikePostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID     int
	NextID *int
}

// NewShowPostLikePostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller show_post_like action.
func NewShowPostLikePostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPostLikePostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPostLikePostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramNextID := req.Params["next_id"]
	if len(paramNextID) > 0 {
		rawNextID := paramNextID[0]
		if nextID, err2 := strconv.Atoi(rawNextID); err2 == nil {
			tmp15 := nextID
			tmp14 := &tmp15
			rctx.NextID = tmp14
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("next_id", rawNextID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPostLikePostsContext) OK(r *PostAllLimit) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.post_all_limit")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPostLikePostsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPostLikePostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowPostMediaPostsContext provides the posts show_post_media action context.
type ShowPostMediaPostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID     int
	NextID *int
}

// NewShowPostMediaPostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller show_post_media action.
func NewShowPostMediaPostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPostMediaPostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPostMediaPostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramNextID := req.Params["next_id"]
	if len(paramNextID) > 0 {
		rawNextID := paramNextID[0]
		if nextID, err2 := strconv.Atoi(rawNextID); err2 == nil {
			tmp18 := nextID
			tmp17 := &tmp18
			rctx.NextID = tmp17
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("next_id", rawNextID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPostMediaPostsContext) OK(r *PostAllLimit) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.post_all_limit")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPostMediaPostsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPostMediaPostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowPostMyPostsContext provides the posts show_post_my action context.
type ShowPostMyPostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID     int
	NextID *int
}

// NewShowPostMyPostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller show_post_my action.
func NewShowPostMyPostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPostMyPostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPostMyPostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramNextID := req.Params["next_id"]
	if len(paramNextID) > 0 {
		rawNextID := paramNextID[0]
		if nextID, err2 := strconv.Atoi(rawNextID); err2 == nil {
			tmp21 := nextID
			tmp20 := &tmp21
			rctx.NextID = tmp20
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("next_id", rawNextID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPostMyPostsContext) OK(r *PostAllLimit) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.post_all_limit")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPostMyPostsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPostMyPostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdatePostsContext provides the posts update action context.
type UpdatePostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *UpdatePostsPayload
}

// NewUpdatePostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the posts controller update action.
func NewUpdatePostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdatePostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdatePostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// updatePostsPayload is the posts update action payload.
type updatePostsPayload struct {
	// プロフィール画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// タイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updatePostsPayload) Validate() (err error) {
	if payload.Title == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "title"))
	}
	return
}

// Publicize creates UpdatePostsPayload from updatePostsPayload
func (payload *updatePostsPayload) Publicize() *UpdatePostsPayload {
	var pub UpdatePostsPayload
	if payload.Img != nil {
		pub.Img = payload.Img
	}
	if payload.Title != nil {
		pub.Title = *payload.Title
	}
	return &pub
}

// UpdatePostsPayload is the posts update action payload.
type UpdatePostsPayload struct {
	// プロフィール画像のパス
	Img *string `form:"img,omitempty" json:"img,omitempty" yaml:"img,omitempty" xml:"img,omitempty"`
	// タイトル
	Title string `form:"title" json:"title" yaml:"title" xml:"title"`
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdatePostsContext) OK(r *IndexPostJSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.index_post_json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePostsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdatePostsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateRoomRoomsContext provides the rooms create_room action context.
type CreateRoomRoomsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateRoomRoomsPayload
}

// NewCreateRoomRoomsContext parses the incoming request URL and body, performs validations and creates the
// context used by the rooms controller create_room action.
func NewCreateRoomRoomsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateRoomRoomsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateRoomRoomsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createRoomRoomsPayload is the rooms create_room action payload.
type createRoomRoomsPayload struct {
	// DMかどうか
	IsGroup *bool `form:"is_group,omitempty" json:"is_group,omitempty" yaml:"is_group,omitempty" xml:"is_group,omitempty"`
	// ルーム名
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// ルームに入れるUserID
	UserIds []int `form:"user_ids,omitempty" json:"user_ids,omitempty" yaml:"user_ids,omitempty" xml:"user_ids,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createRoomRoomsPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.IsGroup == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "is_group"))
	}
	if payload.UserIds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_ids"))
	}
	return
}

// Publicize creates CreateRoomRoomsPayload from createRoomRoomsPayload
func (payload *createRoomRoomsPayload) Publicize() *CreateRoomRoomsPayload {
	var pub CreateRoomRoomsPayload
	if payload.IsGroup != nil {
		pub.IsGroup = *payload.IsGroup
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.UserIds != nil {
		pub.UserIds = payload.UserIds
	}
	return &pub
}

// CreateRoomRoomsPayload is the rooms create_room action payload.
type CreateRoomRoomsPayload struct {
	// DMかどうか
	IsGroup bool `form:"is_group" json:"is_group" yaml:"is_group" xml:"is_group"`
	// ルーム名
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// ルームに入れるUserID
	UserIds []int `form:"user_ids" json:"user_ids" yaml:"user_ids" xml:"user_ids"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateRoomRoomsPayload) Validate() (err error) {

	if payload.UserIds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_ids"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateRoomRoomsContext) Created(r *RoomUser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.room_user")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateRoomRoomsContext) BadRequest(r *ServiceVerror) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.service.verror")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateRoomRoomsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ExistsRoomsContext provides the rooms exists action context.
type ExistsRoomsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewExistsRoomsContext parses the incoming request URL and body, performs validations and creates the
// context used by the rooms controller exists action.
func NewExistsRoomsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ExistsRoomsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ExistsRoomsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("user_id"))
	} else {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ExistsRoomsContext) OK(r *Room) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.room")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ExistsRoomsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ExistsRoomsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// IndexRoomsContext provides the rooms index action context.
type IndexRoomsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NextID *int
}

// NewIndexRoomsContext parses the incoming request URL and body, performs validations and creates the
// context used by the rooms controller index action.
func NewIndexRoomsContext(ctx context.Context, r *http.Request, service *goa.Service) (*IndexRoomsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := IndexRoomsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNextID := req.Params["next_id"]
	if len(paramNextID) > 0 {
		rawNextID := paramNextID[0]
		if nextID, err2 := strconv.Atoi(rawNextID); err2 == nil {
			tmp25 := nextID
			tmp24 := &tmp25
			rctx.NextID = tmp24
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("next_id", rawNextID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IndexRoomsContext) OK(r *AllRoomUser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.all_room_user")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *IndexRoomsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *IndexRoomsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowRoomsContext provides the rooms show action context.
type ShowRoomsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowRoomsContext parses the incoming request URL and body, performs validations and creates the
// context used by the rooms controller show action.
func NewShowRoomsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowRoomsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowRoomsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowRoomsContext) OK(r *RoomUser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.room_user")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowRoomsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowRoomsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowRoomsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteUserRoomsContext provides the user_rooms delete action context.
type DeleteUserRoomsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteUserRoomsContext parses the incoming request URL and body, performs validations and creates the
// context used by the user_rooms controller delete action.
func NewDeleteUserRoomsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteUserRoomsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteUserRoomsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteUserRoomsContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteUserRoomsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// InviteRoomUserRoomsContext provides the user_rooms invite_room action context.
type InviteRoomUserRoomsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *InviteRoomUserRoomsPayload
}

// NewInviteRoomUserRoomsContext parses the incoming request URL and body, performs validations and creates the
// context used by the user_rooms controller invite_room action.
func NewInviteRoomUserRoomsContext(ctx context.Context, r *http.Request, service *goa.Service) (*InviteRoomUserRoomsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := InviteRoomUserRoomsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// inviteRoomUserRoomsPayload is the user_rooms invite_room action payload.
type inviteRoomUserRoomsPayload struct {
	// ルームID
	RoomID *int `form:"room_id,omitempty" json:"room_id,omitempty" yaml:"room_id,omitempty" xml:"room_id,omitempty"`
	// ユーザーID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" yaml:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *inviteRoomUserRoomsPayload) Validate() (err error) {
	if payload.RoomID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "room_id"))
	}
	if payload.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_id"))
	}
	return
}

// Publicize creates InviteRoomUserRoomsPayload from inviteRoomUserRoomsPayload
func (payload *inviteRoomUserRoomsPayload) Publicize() *InviteRoomUserRoomsPayload {
	var pub InviteRoomUserRoomsPayload
	if payload.RoomID != nil {
		pub.RoomID = *payload.RoomID
	}
	if payload.UserID != nil {
		pub.UserID = *payload.UserID
	}
	return &pub
}

// InviteRoomUserRoomsPayload is the user_rooms invite_room action payload.
type InviteRoomUserRoomsPayload struct {
	// ルームID
	RoomID int `form:"room_id" json:"room_id" yaml:"room_id" xml:"room_id"`
	// ユーザーID
	UserID int `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *InviteRoomUserRoomsPayload) Validate() (err error) {

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *InviteRoomUserRoomsContext) Created(r *UserRoom) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user_room+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *InviteRoomUserRoomsContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *InviteRoomUserRoomsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetCurrentUserUsersContext provides the users get_current_user action context.
type GetCurrentUserUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetCurrentUserUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller get_current_user action.
func NewGetCurrentUserUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCurrentUserUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCurrentUserUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCurrentUserUsersContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetCurrentUserUsersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetCurrentUserUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowUserUsersContext provides the users show_user action context.
type ShowUserUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowUserUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller show_user action.
func NewShowUserUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUserUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUserUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserUsersContext) OK(r *ShowUser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.show_user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserUsersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUserUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
