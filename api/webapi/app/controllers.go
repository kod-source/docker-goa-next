// Code generated by goagen v1.5.13, DO NOT EDIT.
//
// API "docker_goa_next": Application Controllers
//
// Command:
// $ main

package app

import (
	"context"
	goa "github.com/shogo82148/goa-v1"
	"github.com/shogo82148/goa-v1/cors"
	"net/http"
	"regexp"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AuthController is the controller interface for the Auth actions.
type AuthController interface {
	goa.Muxer
	Login(*LoginAuthContext) error
	SignUp(*SignUpAuthContext) error
}

// MountAuthController "mounts" a Auth resource controller on the given service.
func MountAuthController(service *goa.Service, ctrl AuthController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v1/login", ctrl.MuxHandler("preflight", handleAuthOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/sign_up", ctrl.MuxHandler("preflight", handleAuthOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewLoginAuthContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*LoginAuthPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Login(rctx)
	}
	h = handleAuthOrigin(h)
	service.Mux.Handle("POST", "/api/v1/login", ctrl.MuxHandler("login", h, unmarshalLoginAuthPayload))
	service.LogInfo("mount", "ctrl", "Auth", "action", "Login", "route", "POST /api/v1/login")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSignUpAuthContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SignUpAuthPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.SignUp(rctx)
	}
	h = handleAuthOrigin(h)
	service.Mux.Handle("POST", "/api/v1/sign_up", ctrl.MuxHandler("sign_up", h, unmarshalSignUpAuthPayload))
	service.LogInfo("mount", "ctrl", "Auth", "action", "SignUp", "route", "POST /api/v1/sign_up")
}

// handleAuthOrigin applies the CORS response headers corresponding to the origin.
func handleAuthOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalLoginAuthPayload unmarshals the request body into the context request data Payload field.
func unmarshalLoginAuthPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &loginAuthPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalSignUpAuthPayload unmarshals the request body into the context request data Payload field.
func unmarshalSignUpAuthPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &signUpAuthPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// CommentsController is the controller interface for the Comments actions.
type CommentsController interface {
	goa.Muxer
	CreateComment(*CreateCommentCommentsContext) error
	DeleteComment(*DeleteCommentCommentsContext) error
	ShowComment(*ShowCommentCommentsContext) error
	UpdateComment(*UpdateCommentCommentsContext) error
}

// MountCommentsController "mounts" a Comments resource controller on the given service.
func MountCommentsController(service *goa.Service, ctrl CommentsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v1/comments", ctrl.MuxHandler("preflight", handleCommentsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/comments/:id", ctrl.MuxHandler("preflight", handleCommentsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateCommentCommentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateCommentCommentsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreateComment(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleCommentsOrigin(h)
	service.Mux.Handle("POST", "/api/v1/comments", ctrl.MuxHandler("create_comment", h, unmarshalCreateCommentCommentsPayload))
	service.LogInfo("mount", "ctrl", "Comments", "action", "CreateComment", "route", "POST /api/v1/comments", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteCommentCommentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeleteComment(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleCommentsOrigin(h)
	service.Mux.Handle("DELETE", "/api/v1/comments/:id", ctrl.MuxHandler("delete_comment", h, nil))
	service.LogInfo("mount", "ctrl", "Comments", "action", "DeleteComment", "route", "DELETE /api/v1/comments/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowCommentCommentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowComment(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleCommentsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/comments/:id", ctrl.MuxHandler("show_comment", h, nil))
	service.LogInfo("mount", "ctrl", "Comments", "action", "ShowComment", "route", "GET /api/v1/comments/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateCommentCommentsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateCommentCommentsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateComment(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleCommentsOrigin(h)
	service.Mux.Handle("PUT", "/api/v1/comments/:id", ctrl.MuxHandler("update_comment", h, unmarshalUpdateCommentCommentsPayload))
	service.LogInfo("mount", "ctrl", "Comments", "action", "UpdateComment", "route", "PUT /api/v1/comments/:id", "security", "jwt")
}

// handleCommentsOrigin applies the CORS response headers corresponding to the origin.
func handleCommentsOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateCommentCommentsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateCommentCommentsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createCommentCommentsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateCommentCommentsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateCommentCommentsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateCommentCommentsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// LikesController is the controller interface for the Likes actions.
type LikesController interface {
	goa.Muxer
	Create(*CreateLikesContext) error
	Delete(*DeleteLikesContext) error
	GetLikeByUser(*GetLikeByUserLikesContext) error
	GetMyLike(*GetMyLikeLikesContext) error
}

// MountLikesController "mounts" a Likes resource controller on the given service.
func MountLikesController(service *goa.Service, ctrl LikesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v1/likes", ctrl.MuxHandler("preflight", handleLikesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/likes/:user_id", ctrl.MuxHandler("preflight", handleLikesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateLikesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateLikesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleLikesOrigin(h)
	service.Mux.Handle("POST", "/api/v1/likes", ctrl.MuxHandler("create", h, unmarshalCreateLikesPayload))
	service.LogInfo("mount", "ctrl", "Likes", "action", "Create", "route", "POST /api/v1/likes", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteLikesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*DeleteLikesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleLikesOrigin(h)
	service.Mux.Handle("DELETE", "/api/v1/likes", ctrl.MuxHandler("delete", h, unmarshalDeleteLikesPayload))
	service.LogInfo("mount", "ctrl", "Likes", "action", "Delete", "route", "DELETE /api/v1/likes", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetLikeByUserLikesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetLikeByUser(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleLikesOrigin(h)
	service.Mux.Handle("GET", "/api/v1/likes/:user_id", ctrl.MuxHandler("get_like_by_user", h, nil))
	service.LogInfo("mount", "ctrl", "Likes", "action", "GetLikeByUser", "route", "GET /api/v1/likes/:user_id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetMyLikeLikesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetMyLike(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleLikesOrigin(h)
	service.Mux.Handle("GET", "/api/v1/likes", ctrl.MuxHandler("get_my_like", h, nil))
	service.LogInfo("mount", "ctrl", "Likes", "action", "GetMyLike", "route", "GET /api/v1/likes", "security", "jwt")
}

// handleLikesOrigin applies the CORS response headers corresponding to the origin.
func handleLikesOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateLikesPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateLikesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createLikesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalDeleteLikesPayload unmarshals the request body into the context request data Payload field.
func unmarshalDeleteLikesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &deleteLikesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// OperandsController is the controller interface for the Operands actions.
type OperandsController interface {
	goa.Muxer
	Add(*AddOperandsContext) error
}

// MountOperandsController "mounts" a Operands resource controller on the given service.
func MountOperandsController(service *goa.Service, ctrl OperandsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v1/add/:left/:right", ctrl.MuxHandler("preflight", handleOperandsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAddOperandsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Add(rctx)
	}
	h = handleOperandsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/add/:left/:right", ctrl.MuxHandler("add", h, nil))
	service.LogInfo("mount", "ctrl", "Operands", "action", "Add", "route", "GET /api/v1/add/:left/:right")
}

// handleOperandsOrigin applies the CORS response headers corresponding to the origin.
func handleOperandsOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// PostsController is the controller interface for the Posts actions.
type PostsController interface {
	goa.Muxer
	CreatePost(*CreatePostPostsContext) error
	Delete(*DeletePostsContext) error
	Index(*IndexPostsContext) error
	Show(*ShowPostsContext) error
	ShowMyLike(*ShowMyLikePostsContext) error
	ShowPostLike(*ShowPostLikePostsContext) error
	ShowPostMedia(*ShowPostMediaPostsContext) error
	ShowPostMy(*ShowPostMyPostsContext) error
	Update(*UpdatePostsContext) error
}

// MountPostsController "mounts" a Posts resource controller on the given service.
func MountPostsController(service *goa.Service, ctrl PostsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v1/posts", ctrl.MuxHandler("preflight", handlePostsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/posts/:id", ctrl.MuxHandler("preflight", handlePostsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/posts/my_like", ctrl.MuxHandler("preflight", handlePostsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/posts/likes/:id", ctrl.MuxHandler("preflight", handlePostsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/posts/my_media/:id", ctrl.MuxHandler("preflight", handlePostsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/posts/my_post/:id", ctrl.MuxHandler("preflight", handlePostsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreatePostPostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreatePostPostsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreatePost(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("POST", "/api/v1/posts", ctrl.MuxHandler("create_post", h, unmarshalCreatePostPostsPayload))
	service.LogInfo("mount", "ctrl", "Posts", "action", "CreatePost", "route", "POST /api/v1/posts", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeletePostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("DELETE", "/api/v1/posts/:id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Posts", "action", "Delete", "route", "DELETE /api/v1/posts/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewIndexPostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Index(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/posts", ctrl.MuxHandler("index", h, nil))
	service.LogInfo("mount", "ctrl", "Posts", "action", "Index", "route", "GET /api/v1/posts", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/posts/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Posts", "action", "Show", "route", "GET /api/v1/posts/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowMyLikePostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowMyLike(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/posts/my_like", ctrl.MuxHandler("show_my_like", h, nil))
	service.LogInfo("mount", "ctrl", "Posts", "action", "ShowMyLike", "route", "GET /api/v1/posts/my_like", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPostLikePostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowPostLike(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/posts/likes/:id", ctrl.MuxHandler("show_post_like", h, nil))
	service.LogInfo("mount", "ctrl", "Posts", "action", "ShowPostLike", "route", "GET /api/v1/posts/likes/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPostMediaPostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowPostMedia(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/posts/my_media/:id", ctrl.MuxHandler("show_post_media", h, nil))
	service.LogInfo("mount", "ctrl", "Posts", "action", "ShowPostMedia", "route", "GET /api/v1/posts/my_media/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPostMyPostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowPostMy(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/posts/my_post/:id", ctrl.MuxHandler("show_post_my", h, nil))
	service.LogInfo("mount", "ctrl", "Posts", "action", "ShowPostMy", "route", "GET /api/v1/posts/my_post/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdatePostsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdatePostsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handlePostsOrigin(h)
	service.Mux.Handle("PUT", "/api/v1/posts/:id", ctrl.MuxHandler("update", h, unmarshalUpdatePostsPayload))
	service.LogInfo("mount", "ctrl", "Posts", "action", "Update", "route", "PUT /api/v1/posts/:id", "security", "jwt")
}

// handlePostsOrigin applies the CORS response headers corresponding to the origin.
func handlePostsOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreatePostPostsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreatePostPostsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createPostPostsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdatePostsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdatePostsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updatePostsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// RoomsController is the controller interface for the Rooms actions.
type RoomsController interface {
	goa.Muxer
	CreateRoom(*CreateRoomRoomsContext) error
	Exists(*ExistsRoomsContext) error
	Index(*IndexRoomsContext) error
	Show(*ShowRoomsContext) error
}

// MountRoomsController "mounts" a Rooms resource controller on the given service.
func MountRoomsController(service *goa.Service, ctrl RoomsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v1/rooms", ctrl.MuxHandler("preflight", handleRoomsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/rooms/exists", ctrl.MuxHandler("preflight", handleRoomsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/rooms/:id", ctrl.MuxHandler("preflight", handleRoomsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateRoomRoomsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateRoomRoomsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreateRoom(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleRoomsOrigin(h)
	service.Mux.Handle("POST", "/api/v1/rooms", ctrl.MuxHandler("create_room", h, unmarshalCreateRoomRoomsPayload))
	service.LogInfo("mount", "ctrl", "Rooms", "action", "CreateRoom", "route", "POST /api/v1/rooms", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewExistsRoomsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Exists(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleRoomsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/rooms/exists", ctrl.MuxHandler("exists", h, nil))
	service.LogInfo("mount", "ctrl", "Rooms", "action", "Exists", "route", "GET /api/v1/rooms/exists", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewIndexRoomsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Index(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleRoomsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/rooms", ctrl.MuxHandler("index", h, nil))
	service.LogInfo("mount", "ctrl", "Rooms", "action", "Index", "route", "GET /api/v1/rooms", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowRoomsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleRoomsOrigin(h)
	service.Mux.Handle("GET", "/api/v1/rooms/:id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Rooms", "action", "Show", "route", "GET /api/v1/rooms/:id", "security", "jwt")
}

// handleRoomsOrigin applies the CORS response headers corresponding to the origin.
func handleRoomsOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateRoomRoomsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateRoomRoomsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createRoomRoomsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ThreadsController is the controller interface for the Threads actions.
type ThreadsController interface {
	goa.Muxer
	Create(*CreateThreadsContext) error
}

// MountThreadsController "mounts" a Threads resource controller on the given service.
func MountThreadsController(service *goa.Service, ctrl ThreadsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/threads", ctrl.MuxHandler("preflight", handleThreadsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateThreadsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateThreadsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleThreadsOrigin(h)
	service.Mux.Handle("POST", "/threads", ctrl.MuxHandler("create", h, unmarshalCreateThreadsPayload))
	service.LogInfo("mount", "ctrl", "Threads", "action", "Create", "route", "POST /threads", "security", "jwt")
}

// handleThreadsOrigin applies the CORS response headers corresponding to the origin.
func handleThreadsOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateThreadsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateThreadsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createThreadsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// UserRoomsController is the controller interface for the UserRooms actions.
type UserRoomsController interface {
	goa.Muxer
	Delete(*DeleteUserRoomsContext) error
	InviteRoom(*InviteRoomUserRoomsContext) error
}

// MountUserRoomsController "mounts" a UserRooms resource controller on the given service.
func MountUserRoomsController(service *goa.Service, ctrl UserRoomsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v1/user_room/:id", ctrl.MuxHandler("preflight", handleUserRoomsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/user_room", ctrl.MuxHandler("preflight", handleUserRoomsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteUserRoomsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserRoomsOrigin(h)
	service.Mux.Handle("DELETE", "/api/v1/user_room/:id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "UserRooms", "action", "Delete", "route", "DELETE /api/v1/user_room/:id", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewInviteRoomUserRoomsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*InviteRoomUserRoomsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.InviteRoom(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUserRoomsOrigin(h)
	service.Mux.Handle("POST", "/api/v1/user_room", ctrl.MuxHandler("invite_room", h, unmarshalInviteRoomUserRoomsPayload))
	service.LogInfo("mount", "ctrl", "UserRooms", "action", "InviteRoom", "route", "POST /api/v1/user_room", "security", "jwt")
}

// handleUserRoomsOrigin applies the CORS response headers corresponding to the origin.
func handleUserRoomsOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalInviteRoomUserRoomsPayload unmarshals the request body into the context request data Payload field.
func unmarshalInviteRoomUserRoomsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &inviteRoomUserRoomsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// UsersController is the controller interface for the Users actions.
type UsersController interface {
	goa.Muxer
	GetCurrentUser(*GetCurrentUserUsersContext) error
	Index(*IndexUsersContext) error
	ShowUser(*ShowUserUsersContext) error
}

// MountUsersController "mounts" a Users resource controller on the given service.
func MountUsersController(service *goa.Service, ctrl UsersController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/v1/current_user", ctrl.MuxHandler("preflight", handleUsersOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/users", ctrl.MuxHandler("preflight", handleUsersOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/v1/users/:id", ctrl.MuxHandler("preflight", handleUsersOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetCurrentUserUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetCurrentUser(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUsersOrigin(h)
	service.Mux.Handle("GET", "/api/v1/current_user", ctrl.MuxHandler("get_current_user", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "GetCurrentUser", "route", "GET /api/v1/current_user", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewIndexUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Index(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUsersOrigin(h)
	service.Mux.Handle("GET", "/api/v1/users", ctrl.MuxHandler("index", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "Index", "route", "GET /api/v1/users", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowUserUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowUser(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleUsersOrigin(h)
	service.Mux.Handle("GET", "/api/v1/users/:id", ctrl.MuxHandler("show_user", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "ShowUser", "route", "GET /api/v1/users/:id", "security", "jwt")
}

// handleUsersOrigin applies the CORS response headers corresponding to the origin.
func handleUsersOrigin(h goa.Handler) goa.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
