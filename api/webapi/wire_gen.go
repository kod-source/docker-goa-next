// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/kod-source/docker-goa-next/app/datastore"
	"github.com/kod-source/docker-goa-next/app/external"
	"github.com/kod-source/docker-goa-next/app/repository"
	"github.com/kod-source/docker-goa-next/app/schema"
	"github.com/kod-source/docker-goa-next/app/usecase"
)

// Injectors from wire.go:

func NewApp(ctx context.Context) (*App, error) {
	service := newService()
	db, err := schema.NewDB()
	if err != nil {
		return nil, err
	}
	timeRepository := repository.NewTimeRepositoy()
	userDatastore := datastore.NewUserDatastore(db, timeRepository)
	jwtExternal := external.NewJWTExternal(timeRepository)
	userUseCase := usecase.NewUserUseCase(userDatastore, jwtExternal)
	usersController := NewUsersController(service, userUseCase)
	postDatastore := datastore.NewPostDatastore(db, timeRepository)
	postUseCase := usecase.NewPostUseCase(postDatastore)
	postsController := NewPostsController(service, postUseCase)
	operandsController := NewOperandsController(service)
	likeDatastore := datastore.NewLikeDatastore(db)
	likeUsecase := usecase.NewLikeUsecase(likeDatastore)
	likesController := NewLikesController(service, likeUsecase)
	commentDatastore := datastore.NewCommentDatastore(db, timeRepository)
	commentUsecase := usecase.NewCommentUsecase(commentDatastore)
	commentsController := NewCommentsController(service, commentUsecase)
	authController := NewAuthController(service, userUseCase)
	app, err := newApp(ctx, service, usersController, postsController, operandsController, likesController, commentsController, authController)
	if err != nil {
		return nil, err
	}
	return app, nil
}
