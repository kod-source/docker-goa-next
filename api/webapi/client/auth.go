// Code generated by goagen v1.5.13, DO NOT EDIT.
//
// API "docker_goa_next": auth Resource Client
//
// Command:
// $ goagen
// --design=github.com/kod-source/docker-goa-next/webapi/design
// --out=$(GOPATH)/src/app/webapi
// --version=v1.5.13

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// LoginAuthPayload is the auth login action payload.
type LoginAuthPayload struct {
	// name of string
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// detail of sample
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// LoginAuthPath computes a request path to the login action of auth.
func LoginAuthPath() string {
	return fmt.Sprintf("/login")
}

// jwtでのログイン処理
func (c *Client) LoginAuth(ctx context.Context, path string, payload *LoginAuthPayload, contentType string) (*http.Response, error) {
	req, err := c.NewLoginAuthRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginAuthRequest create the request corresponding to the login action endpoint of the auth resource.
func (c *Client) NewLoginAuthRequest(ctx context.Context, path string, payload *LoginAuthPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
