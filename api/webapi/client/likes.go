// Code generated by goagen v1.5.13, DO NOT EDIT.
//
// API "docker_goa_next": likes Resource Client
//
// Command:
// $ goagen
// --design=github.com/kod-source/docker-goa-next/webapi/design
// --out=/Users/horikoudai/Documents/ProgrammingLearning/docker-goa-next/api/webapi
// --version=v1.5.13

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateLikesPayload is the likes create action payload.
type CreateLikesPayload struct {
	// 投稿ID
	PostID int `form:"post_id" json:"post_id" yaml:"post_id" xml:"post_id"`
}

// CreateLikesPath computes a request path to the create action of likes.
func CreateLikesPath() string {
	return fmt.Sprintf("/likes")
}

// いいね作成
func (c *Client) CreateLikes(ctx context.Context, path string, payload *CreateLikesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateLikesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateLikesRequest create the request corresponding to the create action endpoint of the likes resource.
func (c *Client) NewCreateLikesRequest(ctx context.Context, path string, payload *CreateLikesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequestWithContext(ctx, "POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
