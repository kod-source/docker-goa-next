// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_room.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kod-source/docker-goa-next/app/model"
)

// MockUserRoomUseCase is a mock of UserRoomUseCase interface.
type MockUserRoomUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoomUseCaseMockRecorder
}

// MockUserRoomUseCaseMockRecorder is the mock recorder for MockUserRoomUseCase.
type MockUserRoomUseCaseMockRecorder struct {
	mock *MockUserRoomUseCase
}

// NewMockUserRoomUseCase creates a new mock instance.
func NewMockUserRoomUseCase(ctrl *gomock.Controller) *MockUserRoomUseCase {
	mock := &MockUserRoomUseCase{ctrl: ctrl}
	mock.recorder = &MockUserRoomUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoomUseCase) EXPECT() *MockUserRoomUseCaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserRoomUseCase) Delete(ctx context.Context, id model.UserRoomID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRoomUseCaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRoomUseCase)(nil).Delete), ctx, id)
}

// InviteRoom mocks base method.
func (m *MockUserRoomUseCase) InviteRoom(ctx context.Context, roomID model.RoomID, userID model.UserID) (*model.UserRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteRoom", ctx, roomID, userID)
	ret0, _ := ret[0].(*model.UserRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteRoom indicates an expected call of InviteRoom.
func (mr *MockUserRoomUseCaseMockRecorder) InviteRoom(ctx, roomID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteRoom", reflect.TypeOf((*MockUserRoomUseCase)(nil).InviteRoom), ctx, roomID, userID)
}
